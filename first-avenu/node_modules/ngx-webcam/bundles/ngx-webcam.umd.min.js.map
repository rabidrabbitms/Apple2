{"version":3,"sources":["../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-image.ts","../esm2015/src/app/modules/src/app/modules/webcam/util/webcam.util.ts","../esm2015/src/app/modules/src/app/modules/webcam/webcam/webcam.component.ts","../esm2015/src/app/src/app/modules/webcam/webcam.module.ts","../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-init-error.ts","../esm2015/src/app/modules/src/app/modules/webcam/domain/webcam-mirror-properties.ts"],"names":["WebcamImage","imageAsDataUrl","mimeType","imageData","this","_mimeType","_imageAsBase64","_imageAsDataUrl","_imageData","getDataFromDataUrl","dataUrl","replace","Object","defineProperty","prototype","WebcamUtil","getAvailableVideoInputs","navigator","mediaDevices","enumerateDevices","Promise","resolve","reject","then","devices","filter","device","kind","catch","err","message","WebcamComponent","width","height","videoOptions","DEFAULT_VIDEO_OPTIONS","allowCameraSwitch","captureImageData","imageType","DEFAULT_IMAGE_TYPE","imageQuality","DEFAULT_IMAGE_QUALITY","imageCapture","EventEmitter","initError","imageClick","cameraSwitched","availableVideoInputs","videoInitialized","activeVideoInputIndex","mediaStream","activeVideoSettings","trigger","_this","triggerSubscription","unsubscribe","subscribe","takeSnapshot","switchCamera","switchCameraSubscription","value","switchToVideoInput","rotateVideoInput","getMediaConstraintsForDevice","deviceId","baseMediaTrackConstraints","result","exact","getDeviceIdFromMediaStreamTrack","mediaStreamTrack","getSettings","getConstraints","deviceIdObj","getValueFromConstrainDOMString","getFacingModeFromMediaStreamTrack","facingMode","facingModeConstraint","isUserFacing","toLowerCase","constrainDOMString","String","Array","isArray","length","ngAfterViewInit","detectAvailableDevices","next","ngOnDestroy","stopMediaTracks","unsubscribeFromSubscriptions","_video","nativeVideoElement","dimensions","videoWidth","videoHeight","_canvas","canvas","nativeElement","context2d","getContext","drawImage","quality","toDataURL","getImageData","forward","increment","nextInputIndex","initWebcam","videoResize","videoRatio","getVideoAspectRatio","Math","min","classes","isMirrorImage","trim","video","videoElement","userVideoTrackConstraints","getUserMedia","videoTrackConstraints","stream","srcObject","play","getVideoTracks","activeDeviceId","findIndex","mediaDeviceInfo","mediaStreamError","getActiveVideoTrack","mirror","mirrorImage","x","getTracks","forEach","track","stop","Component","args","selector","template","Input","Output","ViewChild","static","COMPONENTS","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * Container class for a captured webcam image\r\n * @author basst314, davidshen84\r\n */\r\nexport class WebcamImage {\r\n\r\n  public constructor(imageAsDataUrl: string, mimeType: string, imageData: ImageData) {\r\n    this._mimeType = mimeType;\r\n    this._imageAsDataUrl = imageAsDataUrl;\r\n    this._imageData = imageData;\r\n  }\r\n\r\n  private readonly _mimeType: string = null;\r\n  private _imageAsBase64: string = null;\r\n  private readonly _imageAsDataUrl: string = null;\r\n  private readonly _imageData: ImageData = null;\r\n\r\n\r\n  /**\r\n   * Extracts the Base64 data out of the given dataUrl.\r\n   * @param dataUrl the given dataUrl\r\n   * @param mimeType the mimeType of the data\r\n   */\r\n  private static getDataFromDataUrl(dataUrl: string, mimeType: string) {\r\n    return dataUrl.replace(`data:${mimeType};base64,`, '');\r\n  }\r\n\r\n  /**\r\n   * Get the base64 encoded image data\r\n   * @returns base64 data of the image\r\n   */\r\n  public get imageAsBase64(): string {\r\n    return this._imageAsBase64 ? this._imageAsBase64\r\n      : this._imageAsBase64 = WebcamImage.getDataFromDataUrl(this._imageAsDataUrl, this._mimeType);\r\n  }\r\n\r\n  /**\r\n   * Get the encoded image as dataUrl\r\n   * @returns the dataUrl of the image\r\n   */\r\n  public get imageAsDataUrl(): string {\r\n    return this._imageAsDataUrl;\r\n  }\r\n\r\n  /**\r\n   * Get the ImageData object associated with the canvas' 2d context.\r\n   * @returns the ImageData of the canvas's 2d context.\r\n   */\r\n  public get imageData(): ImageData {\r\n    return this._imageData;\r\n  }\r\n\r\n}\r\n","export class WebcamUtil {\r\n\r\n  /**\r\n   * Lists available videoInput devices\r\n   * @returns a list of media device info.\r\n   */\r\n  public static getAvailableVideoInputs(): Promise<MediaDeviceInfo[]> {\r\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n      return Promise.reject('enumerateDevices() not supported.');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      navigator.mediaDevices.enumerateDevices()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          resolve(devices.filter((device: MediaDeviceInfo) => device.kind === 'videoinput'));\r\n        })\r\n        .catch(err => {\r\n          reject(err.message || err);\r\n        });\r\n    });\r\n  }\r\n}\r\n","import {AfterViewInit, Component, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\r\nimport {WebcamInitError} from '../domain/webcam-init-error';\r\nimport {WebcamImage} from '../domain/webcam-image';\r\nimport {Observable, Subscription} from 'rxjs';\r\nimport {WebcamUtil} from '../util/webcam.util';\r\nimport {WebcamMirrorProperties} from '../domain/webcam-mirror-properties';\r\n\r\n@Component({\r\n  selector: 'webcam',\r\n  templateUrl: './webcam.component.html',\r\n  styleUrls: ['./webcam.component.scss']\r\n})\r\nexport class WebcamComponent implements AfterViewInit, OnDestroy {\r\n  private static DEFAULT_VIDEO_OPTIONS: MediaTrackConstraints = {facingMode: 'environment'};\r\n  private static DEFAULT_IMAGE_TYPE: string = 'image/jpeg';\r\n  private static DEFAULT_IMAGE_QUALITY: number = 0.92;\r\n\r\n  /** Defines the max width of the webcam area in px */\r\n  @Input() public width: number = 640;\r\n  /** Defines the max height of the webcam area in px */\r\n  @Input() public height: number = 480;\r\n  /** Defines base constraints to apply when requesting video track from UserMedia */\r\n  @Input() public videoOptions: MediaTrackConstraints = WebcamComponent.DEFAULT_VIDEO_OPTIONS;\r\n  /** Flag to enable/disable camera switch. If enabled, a switch icon will be displayed if multiple cameras were found */\r\n  @Input() public allowCameraSwitch: boolean = true;\r\n  /** Parameter to control image mirroring (i.e. for user-facing camera). [\"auto\", \"always\", \"never\"] */\r\n  @Input() public mirrorImage: string | WebcamMirrorProperties;\r\n  /** Flag to control whether an ImageData object is stored into the WebcamImage object. */\r\n  @Input() public captureImageData: boolean = false;\r\n  /** The image type to use when capturing snapshots */\r\n  @Input() public imageType: string = WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n  /** The image quality to use when capturing snapshots (number between 0 and 1) */\r\n  @Input() public imageQuality: number = WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n\r\n  /** EventEmitter which fires when an image has been captured */\r\n  @Output() public imageCapture: EventEmitter<WebcamImage> = new EventEmitter<WebcamImage>();\r\n  /** Emits a mediaError if webcam cannot be initialized (e.g. missing user permissions) */\r\n  @Output() public initError: EventEmitter<WebcamInitError> = new EventEmitter<WebcamInitError>();\r\n  /** Emits when the webcam video was clicked */\r\n  @Output() public imageClick: EventEmitter<void> = new EventEmitter<void>();\r\n  /** Emits the active deviceId after the active video device was switched */\r\n  @Output() public cameraSwitched: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  /** available video devices */\r\n  public availableVideoInputs: MediaDeviceInfo[] = [];\r\n\r\n  /** Indicates whether the video device is ready to be switched */\r\n  public videoInitialized: boolean = false;\r\n\r\n  /** If the Observable represented by this subscription emits, an image will be captured and emitted through\r\n   * the 'imageCapture' EventEmitter */\r\n  private triggerSubscription: Subscription;\r\n  /** Index of active video in availableVideoInputs */\r\n  private activeVideoInputIndex: number = -1;\r\n  /** Subscription to switchCamera events */\r\n  private switchCameraSubscription: Subscription;\r\n  /** MediaStream object in use for streaming UserMedia data */\r\n  private mediaStream: MediaStream = null;\r\n  @ViewChild('video', { static: true }) private video: any;\r\n  /** Canvas for Video Snapshots */\r\n  @ViewChild('canvas', { static: true }) private canvas: any;\r\n\r\n  /** width and height of the active video stream */\r\n  private activeVideoSettings: MediaTrackSettings = null;\r\n\r\n  /**\r\n   * If the given Observable emits, an image will be captured and emitted through 'imageCapture' EventEmitter\r\n   */\r\n  @Input()\r\n  public set trigger(trigger: Observable<void>) {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to take snapshots\r\n    this.triggerSubscription = trigger.subscribe(() => {\r\n      this.takeSnapshot();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * If the given Observable emits, the active webcam will be switched to the one indicated by the emitted value.\r\n   * @param switchCamera Indicates which webcam to switch to\r\n   *   true: cycle forwards through available webcams\r\n   *   false: cycle backwards through available webcams\r\n   *   string: activate the webcam with the given id\r\n   */\r\n  @Input()\r\n  public set switchCamera(switchCamera: Observable<boolean | string>) {\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n\r\n    // Subscribe to events from this Observable to switch video device\r\n    this.switchCameraSubscription = switchCamera.subscribe((value: boolean | string) => {\r\n      if (typeof value === 'string') {\r\n        // deviceId was specified\r\n        this.switchToVideoInput(value);\r\n      } else {\r\n        // direction was specified\r\n        this.rotateVideoInput(value !== false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get MediaTrackConstraints to request streaming the given device\r\n   * @param deviceId\r\n   * @param baseMediaTrackConstraints base constraints to merge deviceId-constraint into\r\n   * @returns\r\n   */\r\n  private static getMediaConstraintsForDevice(deviceId: string, baseMediaTrackConstraints: MediaTrackConstraints): MediaTrackConstraints {\r\n    const result: MediaTrackConstraints = baseMediaTrackConstraints ? baseMediaTrackConstraints : this.DEFAULT_VIDEO_OPTIONS;\r\n    if (deviceId) {\r\n      result.deviceId = {exact: deviceId};\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the deviceId from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the id.\r\n   * @param mediaStreamTrack\r\n   * @returns deviceId if found in the mediaStreamTrack\r\n   */\r\n  private static getDeviceIdFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().deviceId) {\r\n      return mediaStreamTrack.getSettings().deviceId;\r\n    } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().deviceId) {\r\n      const deviceIdObj: ConstrainDOMString = mediaStreamTrack.getConstraints().deviceId;\r\n      return WebcamComponent.getValueFromConstrainDOMString(deviceIdObj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tries to harvest the facingMode from the given mediaStreamTrack object.\r\n   * Browsers populate this object differently; this method tries some different approaches\r\n   * to read the value.\r\n   * @param mediaStreamTrack\r\n   * @returns facingMode if found in the mediaStreamTrack\r\n   */\r\n  private static getFacingModeFromMediaStreamTrack(mediaStreamTrack: MediaStreamTrack): string {\r\n    if (mediaStreamTrack) {\r\n      if (mediaStreamTrack.getSettings && mediaStreamTrack.getSettings() && mediaStreamTrack.getSettings().facingMode) {\r\n        return mediaStreamTrack.getSettings().facingMode;\r\n      } else if (mediaStreamTrack.getConstraints && mediaStreamTrack.getConstraints() && mediaStreamTrack.getConstraints().facingMode) {\r\n        const facingModeConstraint: ConstrainDOMString = mediaStreamTrack.getConstraints().facingMode;\r\n        return WebcamComponent.getValueFromConstrainDOMString(facingModeConstraint);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the given mediaStreamTrack claims itself as user facing\r\n   * @param mediaStreamTrack\r\n   */\r\n  private static isUserFacing(mediaStreamTrack: MediaStreamTrack): boolean {\r\n    const facingMode: string = WebcamComponent.getFacingModeFromMediaStreamTrack(mediaStreamTrack);\r\n    return facingMode ? 'user' === facingMode.toLowerCase() : false;\r\n  }\r\n\r\n  /**\r\n   * Extracts the value from the given ConstrainDOMString\r\n   * @param constrainDOMString\r\n   */\r\n  private static getValueFromConstrainDOMString(constrainDOMString: ConstrainDOMString): string {\r\n    if (constrainDOMString) {\r\n      if (constrainDOMString instanceof String) {\r\n        return String(constrainDOMString);\r\n      } else if (Array.isArray(constrainDOMString) && Array(constrainDOMString).length > 0) {\r\n        return String(constrainDOMString[0]);\r\n      } else if (typeof constrainDOMString === 'object') {\r\n        if (constrainDOMString['exact']) {\r\n          return String(constrainDOMString['exact']);\r\n        } else if (constrainDOMString['ideal']) {\r\n          return String(constrainDOMString['ideal']);\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.detectAvailableDevices()\r\n      .then(() => {\r\n        // start video\r\n        this.switchToVideoInput(null);\r\n      })\r\n      .catch((err: string) => {\r\n        this.initError.next(<WebcamInitError>{message: err});\r\n        // fallback: still try to load webcam, even if device enumeration failed\r\n        this.switchToVideoInput(null);\r\n      });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.stopMediaTracks();\r\n    this.unsubscribeFromSubscriptions();\r\n  }\r\n\r\n  /**\r\n   * Takes a snapshot of the current webcam's view and emits the image as an event\r\n   */\r\n  public takeSnapshot(): void {\r\n    // set canvas size to actual video size\r\n    const _video = this.nativeVideoElement;\r\n    const dimensions = {width: this.width, height: this.height};\r\n    if (_video.videoWidth) {\r\n      dimensions.width = _video.videoWidth;\r\n      dimensions.height = _video.videoHeight;\r\n    }\r\n\r\n    const _canvas = this.canvas.nativeElement;\r\n    _canvas.width = dimensions.width;\r\n    _canvas.height = dimensions.height;\r\n\r\n    // paint snapshot image to canvas\r\n    const context2d = _canvas.getContext('2d');\r\n    context2d.drawImage(_video, 0, 0);\r\n\r\n    // read canvas content as image\r\n    const mimeType: string = this.imageType ? this.imageType : WebcamComponent.DEFAULT_IMAGE_TYPE;\r\n    const quality: number = this.imageQuality ? this.imageQuality : WebcamComponent.DEFAULT_IMAGE_QUALITY;\r\n    const dataUrl: string = _canvas.toDataURL(mimeType, quality);\r\n\r\n    // get the ImageData object from the canvas' context.\r\n    let imageData: ImageData = null;\r\n\r\n    if (this.captureImageData) {\r\n      imageData = context2d.getImageData(0, 0, _canvas.width, _canvas.height);\r\n    }\r\n\r\n    this.imageCapture.next(new WebcamImage(dataUrl, mimeType, imageData));\r\n  }\r\n\r\n  /**\r\n   * Switches to the next/previous video device\r\n   * @param forward\r\n   */\r\n  public rotateVideoInput(forward: boolean) {\r\n    if (this.availableVideoInputs && this.availableVideoInputs.length > 1) {\r\n      const increment: number = forward ? 1 : (this.availableVideoInputs.length - 1);\r\n      const nextInputIndex = (this.activeVideoInputIndex + increment) % this.availableVideoInputs.length;\r\n      this.switchToVideoInput(this.availableVideoInputs[nextInputIndex].deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switches the camera-view to the specified video device\r\n   */\r\n  public switchToVideoInput(deviceId: string): void {\r\n    this.videoInitialized = false;\r\n    this.stopMediaTracks();\r\n    this.initWebcam(deviceId, this.videoOptions);\r\n  }\r\n\r\n\r\n  /**\r\n   * Event-handler for video resize event.\r\n   * Triggers Angular change detection so that new video dimensions get applied\r\n   */\r\n  public videoResize(): void {\r\n    // here to trigger Angular change detection\r\n  }\r\n\r\n  public get videoWidth() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.width, this.height * videoRatio);\r\n  }\r\n\r\n  public get videoHeight() {\r\n    const videoRatio = this.getVideoAspectRatio();\r\n    return Math.min(this.height, this.width / videoRatio);\r\n  }\r\n\r\n  public get videoStyleClasses() {\r\n    let classes: string = '';\r\n\r\n    if (this.isMirrorImage()) {\r\n      classes += 'mirrored ';\r\n    }\r\n\r\n    return classes.trim();\r\n  }\r\n\r\n  public get nativeVideoElement() {\r\n    return this.video.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Returns the video aspect ratio of the active video stream\r\n   */\r\n  private getVideoAspectRatio(): number {\r\n    // calculate ratio from video element dimensions if present\r\n    const videoElement = this.nativeVideoElement;\r\n    if (videoElement.videoWidth && videoElement.videoWidth > 0 &&\r\n      videoElement.videoHeight && videoElement.videoHeight > 0) {\r\n\r\n      return videoElement.videoWidth / videoElement.videoHeight;\r\n    }\r\n\r\n    // nothing present - calculate ratio based on width/height params\r\n    return this.width / this.height;\r\n  }\r\n\r\n  /**\r\n   * Init webcam live view\r\n   */\r\n  private initWebcam(deviceId: string, userVideoTrackConstraints: MediaTrackConstraints) {\r\n    const _video = this.nativeVideoElement;\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n      // merge deviceId -> userVideoTrackConstraints\r\n      const videoTrackConstraints = WebcamComponent.getMediaConstraintsForDevice(deviceId, userVideoTrackConstraints);\r\n\r\n      navigator.mediaDevices.getUserMedia(<MediaStreamConstraints>{video: videoTrackConstraints})\r\n        .then((stream: MediaStream) => {\r\n          this.mediaStream = stream;\r\n          _video.srcObject = stream;\r\n          _video.play();\r\n\r\n          this.activeVideoSettings = stream.getVideoTracks()[0].getSettings();\r\n          const activeDeviceId: string = WebcamComponent.getDeviceIdFromMediaStreamTrack(stream.getVideoTracks()[0]);\r\n\r\n          this.cameraSwitched.next(activeDeviceId);\r\n\r\n          // Initial detect may run before user gave permissions, returning no deviceIds. This prevents later camera switches. (#47)\r\n          // Run detect once again within getUserMedia callback, to make sure this time we have permissions and get deviceIds.\r\n          this.detectAvailableDevices()\r\n            .then(() => {\r\n              this.activeVideoInputIndex = activeDeviceId ? this.availableVideoInputs\r\n                .findIndex((mediaDeviceInfo: MediaDeviceInfo) => mediaDeviceInfo.deviceId === activeDeviceId) : -1;\r\n              this.videoInitialized = true;\r\n            })\r\n            .catch(() => {\r\n              this.activeVideoInputIndex = -1;\r\n              this.videoInitialized = true;\r\n            });\r\n        })\r\n        .catch((err: MediaStreamError) => {\r\n          this.initError.next(<WebcamInitError>{message: err.message, mediaStreamError: err});\r\n        });\r\n    } else {\r\n      this.initError.next(<WebcamInitError>{message: 'Cannot read UserMedia from MediaDevices.'});\r\n    }\r\n  }\r\n\r\n  private getActiveVideoTrack(): MediaStreamTrack {\r\n    return this.mediaStream ? this.mediaStream.getVideoTracks()[0] : null;\r\n  }\r\n\r\n  private isMirrorImage(): boolean {\r\n    if (!this.getActiveVideoTrack()) {\r\n      return false;\r\n    }\r\n\r\n    // check for explicit mirror override parameter\r\n    {\r\n      let mirror: string = 'auto';\r\n      if (this.mirrorImage) {\r\n        if (typeof this.mirrorImage === 'string') {\r\n          mirror = String(this.mirrorImage).toLowerCase();\r\n        } else {\r\n          // WebcamMirrorProperties\r\n          if (this.mirrorImage.x) {\r\n            mirror = this.mirrorImage.x.toLowerCase();\r\n          }\r\n        }\r\n      }\r\n\r\n      switch (mirror) {\r\n        case 'always':\r\n          return true;\r\n        case 'never':\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // default: enable mirroring if webcam is user facing\r\n    return WebcamComponent.isUserFacing(this.getActiveVideoTrack());\r\n  }\r\n\r\n  /**\r\n   * Stops all active media tracks.\r\n   * This prevents the webcam from being indicated as active,\r\n   * even if it is no longer used by this component.\r\n   */\r\n  private stopMediaTracks() {\r\n    if (this.mediaStream && this.mediaStream.getTracks) {\r\n      // getTracks() returns all media tracks (video+audio)\r\n      this.mediaStream.getTracks()\r\n        .forEach((track: MediaStreamTrack) => track.stop());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe from all open subscriptions\r\n   */\r\n  private unsubscribeFromSubscriptions() {\r\n    if (this.triggerSubscription) {\r\n      this.triggerSubscription.unsubscribe();\r\n    }\r\n    if (this.switchCameraSubscription) {\r\n      this.switchCameraSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reads available input devices\r\n   */\r\n  private detectAvailableDevices(): Promise<MediaDeviceInfo[]> {\r\n    return new Promise((resolve, reject) => {\r\n      WebcamUtil.getAvailableVideoInputs()\r\n        .then((devices: MediaDeviceInfo[]) => {\r\n          this.availableVideoInputs = devices;\r\n          resolve(devices);\r\n        })\r\n        .catch(err => {\r\n          this.availableVideoInputs = [];\r\n          reject(err);\r\n        });\r\n    });\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {WebcamComponent} from './webcam/webcam.component';\n\nconst COMPONENTS = [\n  WebcamComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    COMPONENTS\n  ],\n  exports: [\n    COMPONENTS\n  ]\n})\nexport class WebcamModule {\n}\n","export class WebcamInitError {\r\n  public message: string = null;\r\n  public mediaStreamError: MediaStreamError = null;\r\n}\r\n","export class WebcamMirrorProperties {\r\n  public x: string;  // [\"auto\", \"always\", \"never\"]\r\n}\r\n"]}